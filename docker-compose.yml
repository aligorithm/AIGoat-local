version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: aigoat-postgres
    environment:
      POSTGRES_USER: pos_user
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pos_user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO S3-compatible storage
  minio:
    image: quay.io/minio/minio
    container_name: aigoat-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Ollama AI Runtime (Container Mode) - only runs with --profile container-ollama
  ollama:
    image: ollama/ollama
    container_name: aigoat-ollama
    profiles: ["container-ollama"]
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Model initialization service (Container Mode) - only runs with --profile container-ollama
  ollama-init:
    image: ollama/ollama
    container_name: aigoat-ollama-init
    profiles: ["container-ollama"]
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
    command: >
      sh -c "
        echo 'Pulling required models...' &&
        ollama pull llava &&
        ollama pull llama3.1 &&
        echo 'Models ready!'
      "
    restart: "no"

  # Flask Backend (Host Ollama Mode - Default)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: aigoat-backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://pos_user:password123@postgres:5432/postgres
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - OLLAMA_ENDPOINT=${OLLAMA_ENDPOINT:-http://host.docker.internal:11434}
      - AI_PROVIDER=ollama
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Flask Backend (Container Ollama Mode) - only runs with --profile container-ollama
  backend-container-ollama:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: aigoat-backend
    profiles: ["container-ollama"]
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://pos_user:password123@postgres:5432/postgres
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - OLLAMA_ENDPOINT=http://ollama:11434
      - AI_PROVIDER=ollama
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: aigoat-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5000
    depends_on:
      - backend

volumes:
  postgres_data:
  minio_data:
  ollama_data:

networks:
  default:
    name: aigoat-network 